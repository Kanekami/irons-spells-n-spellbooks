plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.170'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    flatDir {
        dir 'libs'
    }

    maven { url = "https://maven.enginehub.org/repo/" }
    maven {
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.kosmx.dev/" }
}

jarJar.enable()
dependencies {
    // FORGE ******************************************************************************************************
    implementation "net.neoforged:neoforge:${neo_version}"

    // GECKOLIB ***************************************************************************************************
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

    // PLAYER ANIMATOR ********************************************************************************************
    //compileOnly "dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}"
    implementation "dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}"
    //jarJar(group: "dev.kosmx.player-anim", name: "player-animation-lib-forge", version: "[${player_animator_version},${player_animator_version}]")

    // TETRA ******************************************************************************************************
    //compileOnly "se.mickelus.mutil:mutil:${mutil_version}"
    compileOnly "curse.maven:tetra-289712:4414851"
    compileOnly "se.mickelus.mutil:mutil:${mutil_version}"

    // If you want to run with tetra in dev comment the above line and uncomment the following 2 lines
//    localRuntime "curse.maven:tetra-${tetra_version}"
//    localRuntime "se.mickelus.mutil:mutil:${mutil_version}"
//    localRuntime "curse.maven:better-combat-by-daedelus-639842:5723092"
//    localRuntime "curse.maven:cloth-config-348521:5623420"

    // JEI ********************************************************************************************************
    compileOnly "mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${jei_mc_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${jei_mc_version}-neoforge:${jei_version}"

    // CURIOS *****************************************************************************************************
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"

    // PATCHOULI **************************************************************************************************
    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}-NEOFORGE"
    localRuntime "vazkii.patchouli:Patchouli:${patchouli_version}-NEOFORGE"
    // APOTHEOSIS
    compileOnly "curse.maven:apotheosis-313970:4876447"
    compileOnly "curse.maven:apothic-attributes-898963:5597608"

//    localRuntime "curse.maven:placebo-283644:5597604"
//    localRuntime "curse.maven:apothic-attributes-898963:5597608"
//    implementation "curse.maven:irons-jewelry-1101111:5943490"
//    implementation "curse.maven:atlas-api-1145462:5940096"

    //QOL
    //todo: 1.21: update these mods
//    localRuntime "curse.maven:tslatentitystatus-tes-830420:4746241"
    //localRuntime "curse.maven:mouse-tweaks-60089:5637846"

    // JSON ******************************************************************************************************
    implementation "com.google.code.gson:gson:${gson_version}"

    // LOCAL LIBS FOR TESTING (put the jar in /libs/ folder

    //jarJar(implementation("ignored:defaultresources-forge:1.19.2-0.3.0"))) {
    //    jarJar.ranged(it, "[0.3.0,)")
    //}

    //implementation "io.redspace:modlist:1.0.0"
    //    for ( File file : fileTree(dir: 'libs', include: '*.jar') ) {
    //        runtimeOnly files(file)
    //    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            geckolib_version       : geckolib_version,
            player_animator_version: player_animator_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            mod_license            : mod_license,
            mod_authors            : mod_authors,
            mod_credits            : mod_credits,
            mod_description        : mod_description,
            mod_display_url        : mod_display_url,
            mod_issue_tracker      : mod_issue_tracker,
            mod_logo_file          : mod_logo_file
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    exclude('**/*.psd')
    exclude('**/*.bbmodel')
}

java {
    withSourcesJar()
    //withJavadocJar()
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set('api')
    include 'io/redspace/ironsspellbooks/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives apiJar
    archives sourcesJar
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {

        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories {
        maven {
            name = "redspace"

            if (project.version.endsWith('-SNAPSHOT')) {
                url uri("https://code.redspace.io/snapshots")
            } else {
                url uri("https://code.redspace.io/releases")
            }

            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('copyAnimations', Copy) {
    from layout.projectDirectory.file("src/main/resources/assets/${mod_id}/player_animations/casting_animations.json")
    into layout.projectDirectory.dir("src/main/resources/assets/${mod_id}/animations")
}

tasks.classes.dependsOn(tasks.copyAnimations)
tasks.processResources.dependsOn(tasks.copyAnimations)
tasks.sourcesJar.dependsOn(tasks.copyAnimations)

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}